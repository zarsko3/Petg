/*
   PETg Pet Tracking Collar - Simplified Proximity Alert Firmware
   ESP32-S3 Version - Compatible with ESP32 Core 3.2.0
   
   ✅ SIMPLE SINGLE FILE SOLUTION - Minimal external dependencies
   ✅ Compatible with ESP32 Core 3.2.0 (fixes LEDC issues)
   ✅ Live proximity detection (2cm-20cm configurable)
   ✅ Real-time buzzer/vibration alerts  
   ✅ WebSocket configuration interface
   
   Version: 3.0 - Simple/Clean Implementation (Backup)
   
   NOTE: This is the simplified version without OLED display and advanced WiFi management.
   For the complete implementation with all features, use ESP32-S3_PetCollar.ino
   
   TO USE THIS VERSION:
   1. Rename this file from .backup to .ino
   2. Delete or rename ESP32-S3_PetCollar.ino 
   3. Compile and upload
*/

#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>

// ==================== HARDWARE PINS ====================
#define BUZZER_PIN 18
#define VIBRATION_PIN 19
#define STATUS_LED_PIN 2

// ==================== NETWORK CONFIG ====================
const char* ssid = "YourWiFiNetwork";
const char* password = "YourWiFiPassword";

// ==================== GLOBAL OBJECTS ====================
WebServer server(80);
WebSocketsServer webSocket = WebSocketsServer(8080);
BLEScan* pBLEScan;

// ==================== BEACON CONFIG STRUCTURE ====================
struct BeaconConfig {
  String id;
  String name;
  String alertMode;              // "none", "buzzer", "vibration", "both"
  int triggerDistanceCm;         // Distance trigger (2-20cm)
  int alertDurationMs;           // Alert duration
  int alertIntensity;            // Alert intensity 1-5
  bool enableProximityDelay;     // Enable delay before triggering
  int proximityDelayMs;          // Delay time
  int cooldownPeriodMs;          // Cooldown between alerts
  
  // State tracking
  unsigned long lastSeenTime;
  unsigned long proximityStartTime;
  unsigned long lastAlertTime;
  bool isInProximity;
  bool alertActive;
  
  BeaconConfig() {
    alertMode = "buzzer";
    triggerDistanceCm = 5;
    alertDurationMs = 2000;
    alertIntensity = 3;
    enableProximityDelay = false;
    proximityDelayMs = 0;
    cooldownPeriodMs = 3000;
    lastSeenTime = 0;
    proximityStartTime = 0;
    lastAlertTime = 0;
    isInProximity = false;
    alertActive = false;
  }
};

// ==================== SYSTEM STATE ====================
BeaconConfig beaconConfigs[10];
int configCount = 0;
String detectedBeacons[20];
int detectedCount = 0;
bool wifiConnected = false;
unsigned long lastWiFiCheck = 0;
unsigned long lastBeaconScan = 0;
unsigned long currentAlertStart = 0;
String currentAlertBeacon = "";
bool buzzerActive = false;
bool vibrationActive = false;

// ==================== UTILITY FUNCTIONS ====================
int rssiToDistance(int rssi) {
  float distanceMeters = pow(10.0, (rssi + 40.0) / -20.0);
  return max(1, (int)round(distanceMeters * 100));
}

BeaconConfig* findBeaconConfig(String name) {
  for (int i = 0; i < configCount; i++) {
    if (beaconConfigs[i].name == name) {
      return &beaconConfigs[i];
    }
  }
  return nullptr;
}

void addBeaconConfig(String id, String name, String alertMode, int triggerDistance) {
  if (configCount < 10) {
    BeaconConfig& config = beaconConfigs[configCount];
    config.id = id;
    config.name = name;
    config.alertMode = alertMode;
    config.triggerDistanceCm = triggerDistance;
    configCount++;
    Serial.printf("✅ Added beacon: %s (%dcm)\n", name.c_str(), triggerDistance);
  }
}

// ==================== ALERT FUNCTIONS (ESP32 Core 3.2.0 Compatible) ====================
void activateBuzzer(int intensity, int durationMs) {
  buzzerActive = true;
  int dutyCycle = map(intensity, 1, 5, 50, 255);
  
  // Use modern ESP32 Core 3.2.0 LEDC API
  ledcAttach(BUZZER_PIN, 2000, 8);  // pin, frequency, resolution
  ledcWrite(BUZZER_PIN, dutyCycle);
  
  Serial.printf("🔊 BUZZER: intensity=%d, duration=%dms\n", intensity, durationMs);
}

void activateVibration(int intensity, int durationMs) {
  vibrationActive = true;
  int dutyCycle = map(intensity, 1, 5, 100, 255);
  
  // Use modern ESP32 Core 3.2.0 LEDC API
  ledcAttach(VIBRATION_PIN, 100, 8);
  ledcWrite(VIBRATION_PIN, dutyCycle);
  
  Serial.printf("📳 VIBRATION: intensity=%d, duration=%dms\n", intensity, durationMs);
}

void stopAlert() {
  if (buzzerActive) {
    ledcWrite(BUZZER_PIN, 0);
    ledcDetach(BUZZER_PIN);
    buzzerActive = false;
    Serial.println("🔇 Buzzer stopped");
  }
  
  if (vibrationActive) {
    ledcWrite(VIBRATION_PIN, 0);
    ledcDetach(VIBRATION_PIN);
    vibrationActive = false;
    Serial.println("📴 Vibration stopped");
  }
  
  BeaconConfig* config = findBeaconConfig(currentAlertBeacon);
  if (config) {
    config->alertActive = false;
  }
  currentAlertBeacon = "";
  currentAlertStart = 0;
}

// ==================== PROXIMITY ALERT SYSTEM ====================
void triggerProximityAlert(const String& beaconName, BeaconConfig& config) {
  unsigned long currentTime = millis();
  
  // Check cooldown
  if (currentTime - config.lastAlertTime < config.cooldownPeriodMs) {
    return;
  }
  
  // Stop any current alert
  if (buzzerActive || vibrationActive) {
    stopAlert();
  }
  
  // Start new alert
  config.alertActive = true;
  config.lastAlertTime = currentTime;
  currentAlertStart = currentTime;
  currentAlertBeacon = beaconName;
  
  Serial.printf("🚨 PROXIMITY ALERT: %s at %dcm\n", beaconName.c_str(), config.triggerDistanceCm);
  
  // Trigger alert based on mode
  if (config.alertMode == "buzzer") {
    activateBuzzer(config.alertIntensity, config.alertDurationMs);
  } else if (config.alertMode == "vibration") {
    activateVibration(config.alertIntensity, config.alertDurationMs);
  } else if (config.alertMode == "both") {
    activateBuzzer(config.alertIntensity, config.alertDurationMs);
    delay(100);
    activateVibration(config.alertIntensity, config.alertDurationMs);
  }
  
  // Send WebSocket notification
  DynamicJsonDocument alertDoc(512);
  alertDoc["type"] = "proximity_alert";
  alertDoc["beacon"] = beaconName;
  alertDoc["trigger_distance"] = config.triggerDistanceCm;
  alertDoc["alert_mode"] = config.alertMode;
  alertDoc["intensity"] = config.alertIntensity;
  alertDoc["timestamp"] = currentTime;
  
  String alertMsg;
  serializeJson(alertDoc, alertMsg);
  webSocket.broadcastTXT(alertMsg);
}

// ==================== BLE SCANNING ====================
class ProximityAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    String deviceName = advertisedDevice.getName().c_str();
    int rssi = advertisedDevice.getRSSI();
    
    if (deviceName.startsWith("PetZone-Home-")) {
      int distanceCm = rssiToDistance(rssi);
      
      // Update detected beacons list
      bool found = false;
      for (int i = 0; i < detectedCount; i++) {
        if (detectedBeacons[i] == deviceName) {
          found = true;
          break;
        }
      }
      if (!found && detectedCount < 20) {
        detectedBeacons[detectedCount] = deviceName;
        detectedCount++;
      }
      
      // Check configured beacons
      BeaconConfig* config = findBeaconConfig(deviceName);
      if (config && config->alertMode != "none") {
        unsigned long currentTime = millis();
        
        if (distanceCm <= config->triggerDistanceCm) {
          if (!config->isInProximity) {
            config->isInProximity = true;
            config->proximityStartTime = currentTime;
            Serial.printf("📍 Entered proximity: %s at %dcm\n", deviceName.c_str(), distanceCm);
          }
          
          bool shouldTrigger = false;
          if (!config->enableProximityDelay) {
            shouldTrigger = true;
          } else {
            if (currentTime - config->proximityStartTime >= config->proximityDelayMs) {
              shouldTrigger = true;
            }
          }
          
          if (shouldTrigger && !config->alertActive) {
            triggerProximityAlert(deviceName, *config);
          }
        } else {
          if (config->isInProximity) {
            config->isInProximity = false;
            config->proximityStartTime = 0;
            Serial.printf("📍 Left proximity: %s (now %dcm)\n", deviceName.c_str(), distanceCm);
          }
        }
        config->lastSeenTime = currentTime;
      }
      
      Serial.printf("📡 %s: %ddBm (%dcm)\n", deviceName.c_str(), rssi, distanceCm);
    }
  }
};

// ==================== WEBSOCKET HANDLING ====================
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("🔌 WebSocket[%u] Disconnected\n", num);
      break;
      
    case WStype_CONNECTED: {
      IPAddress ip = webSocket.remoteIP(num);
      Serial.printf("🔌 WebSocket[%u] Connected from %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
      
      DynamicJsonDocument welcomeDoc(256);
      welcomeDoc["type"] = "welcome";
      welcomeDoc["message"] = "Connected to PETg Collar Live Proximity System";
      welcomeDoc["version"] = "3.0-Simple";
      
      String welcome;
      serializeJson(welcomeDoc, welcome);
      webSocket.sendTXT(num, welcome);
      break;
    }
    
    case WStype_TEXT: {
      String message = String((char*)payload);
      handleWebSocketMessage(message, num);
      break;
    }
    
    default:
      break;
  }
}

void handleWebSocketMessage(String message, uint8_t clientNum) {
  DynamicJsonDocument doc(1024);
  deserializeJson(doc, message);
  
  String command = doc["command"];
  
  if (command == "get_status") {
    sendCollarData();
  } else if (command == "test_buzzer") {
    activateBuzzer(3, 1000);
    webSocket.sendTXT(clientNum, "{\"type\":\"response\",\"command\":\"test_buzzer\",\"status\":\"triggered\"}");
  } else if (command == "test_vibration") {
    activateVibration(3, 1000);
    webSocket.sendTXT(clientNum, "{\"type\":\"response\",\"command\":\"test_vibration\",\"status\":\"triggered\"}");
  } else if (command == "stop_alert") {
    stopAlert();
    webSocket.sendTXT(clientNum, "{\"type\":\"response\",\"command\":\"stop_alert\",\"status\":\"stopped\"}");
  } else if (command == "update_beacon_config") {
    handleBeaconConfigUpdate(doc);
  }
}

void handleBeaconConfigUpdate(DynamicJsonDocument& doc) {
  String beaconId = doc["beacon_id"];
  JsonObject config = doc["config"];
  
  BeaconConfig* beaconConfig = nullptr;
  for (int i = 0; i < configCount; i++) {
    if (beaconConfigs[i].id == beaconId) {
      beaconConfig = &beaconConfigs[i];
      break;
    }
  }
  
  if (beaconConfig && config.containsKey("trigger_distance_cm")) {
    beaconConfig->triggerDistanceCm = config["trigger_distance_cm"];
    beaconConfig->alertDurationMs = config["alert_duration_ms"] | 2000;
    beaconConfig->alertIntensity = config["alert_intensity"] | 3;
    beaconConfig->enableProximityDelay = config["enable_proximity_delay"] | false;
    beaconConfig->proximityDelayMs = config["proximity_delay_ms"] | 0;
    beaconConfig->cooldownPeriodMs = config["cooldown_period_ms"] | 3000;
    
    Serial.printf("✅ Updated beacon config: %s\n", beaconId.c_str());
    
    DynamicJsonDocument response(256);
    response["type"] = "config_updated";
    response["beacon_id"] = beaconId;
    response["status"] = "success";
    
    String responseStr;
    serializeJson(response, responseStr);
    webSocket.broadcastTXT(responseStr);
  }
}

void sendCollarData() {
  DynamicJsonDocument doc(2048);
  
  doc["device"] = "petg_collar_simple";
  doc["version"] = "3.0-Simple";
  doc["local_ip"] = WiFi.localIP().toString();
  doc["status"] = "active";
  doc["wifi_connected"] = wifiConnected;
  doc["uptime"] = millis();
  doc["battery_level"] = 85;
  doc["battery_voltage"] = 3.7;
  
  JsonArray beacons = doc.createNestedArray("beacons");
  for (int i = 0; i < detectedCount; i++) {
    JsonObject beacon = beacons.createNestedObject();
    beacon["name"] = detectedBeacons[i];
    beacon["rssi"] = -65;
    beacon["last_seen"] = millis();
  }
  
  String response;
  serializeJson(doc, response);
  webSocket.broadcastTXT(response);
}

// ==================== HTTP ENDPOINTS ====================
void handleRoot() {
  server.send(200, "text/plain", "PETg Collar - Simple Proximity Alert System v3.0\nFeatures: Basic proximity alerts, configurable triggers");
}

void handleDiscover() {
  DynamicJsonDocument doc(512);
  doc["device"] = "petg_collar_simple";
  doc["version"] = "3.0-Simple";
  doc["features"] = "basic_proximity_alerts,configurable_triggers";
  doc["local_ip"] = WiFi.localIP().toString();
  doc["status"] = "active";
  doc["alert_system"] = "simple_v3";

  String response;
  serializeJson(doc, response);
  server.send(200, "application/json", response);
}

void handleData() {
  sendCollarData();
  server.send(200, "application/json", "{\"status\":\"data_sent_via_websocket\"}");
}

// ==================== ALERT MANAGEMENT ====================
void manageAlerts() {
  unsigned long currentTime = millis();
  
  if ((buzzerActive || vibrationActive) && currentAlertStart > 0) {
    BeaconConfig* config = findBeaconConfig(currentAlertBeacon);
    if (config && (currentTime - currentAlertStart >= config->alertDurationMs)) {
      stopAlert();
    }
  }
}

// ==================== WIFI CONNECTION ====================
void connectWiFi() {
  Serial.print("🌐 Connecting to WiFi: ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    wifiConnected = true;
    Serial.println("\n✅ WiFi Connected!");
    Serial.print("📡 IP address: ");
    Serial.println(WiFi.localIP());
  } else {
    wifiConnected = false;
    Serial.println("\n❌ WiFi connection failed!");
  }
}

// ==================== SETUP ====================
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("🚀 PETg Collar - Simple Proximity Alert System v3.0");
  Serial.println("✅ Compatible with ESP32 Core 3.2.0");
  
  // Initialize hardware
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(VIBRATION_PIN, OUTPUT);
  pinMode(STATUS_LED_PIN, OUTPUT);
  
  // Initialize WiFi
  connectWiFi();
  
  // Setup HTTP server
  server.on("/", handleRoot);
  server.on("/api/discover", handleDiscover);
  server.on("/api/data", handleData);
  server.begin();
  Serial.println("✅ HTTP server started on port 80");
  
  // Setup WebSocket server
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  Serial.println("✅ WebSocket server started on port 8080");
  
  // Initialize BLE
  BLEDevice::init("PETg-Collar-Simple");
  pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new ProximityAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->setInterval(100);
  pBLEScan->setWindow(99);
  
  // Add default beacon configuration
  addBeaconConfig("beacon-001", "PetZone-Home-03", "buzzer", 5);
  
  Serial.println("🎯 Simple Proximity Alert System Ready!");
  Serial.println("🔍 Scanning for beacons...");
}

// ==================== MAIN LOOP ====================
void loop() {
  // Handle network
  server.handleClient();
  webSocket.loop();
  
  // Check WiFi connection
  unsigned long currentTime = millis();
  if (currentTime - lastWiFiCheck > 30000) {
    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("🔄 WiFi reconnecting...");
      connectWiFi();
    }
    lastWiFiCheck = currentTime;
  }
  
  // Perform BLE scan
  if (currentTime - lastBeaconScan > 1000) {
    pBLEScan->start(1, false);
    pBLEScan->clearResults();
    lastBeaconScan = currentTime;
  }
  
  // Manage alerts
  manageAlerts();
  
  delay(10);
} 